### **2. Getting Started with SSH**

#### **2.1 Basic SSH Commands:**

- **Connecting to a Remote Server:**

    ```bash
    ssh username@remote_host
    ```
    
    - **Details:**
        - **username:** Your login name on the remote server.
        - **remote_host:** The IP address or domain name of the server.
        - **Example:** `ssh john@example.com` connects to the server at `example.com` using the `john` account.
    - **First Connection Warning:** The first time you connect to a server, SSH will prompt you to verify the server's host key. This is to ensure you are connecting to the correct server and not an imposter.
    - **Tip:** Use `ssh -v` for verbose output to troubleshoot connection issues.

- **Running a Command on a Remote Server:**

    ```bash
    ssh username@remote_host 'command'
    ```
    
    - **Example:** `ssh john@example.com 'uptime'` will connect to `example.com` as `john` and execute the `uptime` command, showing how long the server has been running.

- **Copying Files to a Remote Server with SCP:**

    ```bash
    scp /path/to/local/file username@remote_host:/path/to/remote/directory/
    ```
    
    - **Details:**
        - **scp:** Secure Copy Protocol, based on SSH, for transferring files securely.
        - **Example:** `scp myfile.txt john@example.com:/home/john/` copies `myfile.txt` to `john`'s home directory on the server.

- **Copying Files from a Remote Server:**

    ```bash
    scp username@remote_host:/path/to/remote/file /path/to/local/directory/
    ```
    
    - **Example:** `scp john@example.com:/home/john/myfile.txt /local/path/` copies `myfile.txt` from the server to your local machine.

- **SSH File Transfer with SFTP:**

    ```bash
    sftp username@remote_host
    ```
    
    - **Usage:** Provides an interactive session for secure file transfer, where you can use commands like `put`, `get`, `ls`, and `cd` to manage files on the remote server.

#### **2.2 Generating SSH Keys:**

SSH keys provide a secure way to log into a server without needing a password. Here’s how to create and use them:

- **Generating a New SSH Key Pair:**

    ```bash
    ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
    ```
    
    - **Explanation:**
        - **-t rsa:** Specifies the type of key (RSA is the most common).
        - **-b 4096:** Specifies the key size (4096 bits is secure).
        - **-C "your_email@example.com":** Adds a comment to the key, often used to identify the key.
    - **Process:**
        - **File Location:** You’ll be prompted to save the key. The default location is `~/.ssh/id_rsa` for the private key and `~/.ssh/id_rsa.pub` for the public key.
        - **Passphrase:** You can add a passphrase to protect the private key. This adds an extra layer of security.

- **Copying the Public Key to the Server:**

    ```bash
    ssh-copy-id username@remote_host
    ```
    
    - **Explanation:** This command copies your public key to the remote server and adds it to the `~/.ssh/authorized_keys` file, enabling key-based authentication.
    - **Manual Method:**
        - If `ssh-copy-id` is unavailable, manually copy the public key:

            ```bash
            cat ~/.ssh/id_rsa.pub | ssh username@remote_host 'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys'
            ```
            
            - **Explanation:** This pipes your public key to the remote server and appends it to `authorized_keys`.

- **Setting Permissions:**

    - **Important:** Ensure the `~/.ssh` directory and `authorized_keys` file have correct permissions on the server:

        ```bash
        chmod 700 ~/.ssh
        chmod 600 ~/.ssh/authorized_keys
        ```
        
        - **Explanation:** These permissions restrict access to the SSH configuration and keys, preventing unauthorized access.
